/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "MediaFilter.h"
#include "LogHelper.h"
#include "MTMacros.h"
#include "JniHelper.h"
#include "MTVideoTools.h"

#define JAVA_CLASS_VIDEOEDITER "com/meitu/media/tools/editor/VideoFilterEdit"

#define VIDEO_EDITER_PROGRESS_BEGAN 0x01
#define VIDEO_EDITER_PROGRESS_CHANGED 0x02
#define VIDEO_EDITER_PROGRESS_ENDED 0x03
#define VIDEO_EDITER_PROGRESS_CANCELED 0x04

class AndroidMediaFilterProgressListener : public MediaFilterProgressListener {
public:
    AndroidMediaFilterProgressListener() {}
    virtual ~AndroidMediaFilterProgressListener() {
    }

    virtual void MediaFilterProgressBegan(MediaFilter* editer) {
        postInfo(VIDEO_EDITER_PROGRESS_BEGAN, 0.0, 0.0);
    }

    virtual void MediaFilterProgressChanged(MediaFilter* editer, double progress, double total) {
        postInfo(VIDEO_EDITER_PROGRESS_CHANGED, progress, total);
    }

    virtual void MediaFilterProgressEnded(MediaFilter* editer) {
        postInfo(VIDEO_EDITER_PROGRESS_ENDED, 0.0, 0.0);
        refObj();
    }

    virtual void MediaFilterProgressCanceled(MediaFilter* editer) {
        postInfo(VIDEO_EDITER_PROGRESS_CANCELED, 0, 0);
        refObj();
    }

private:
    void postInfo(int what, double arg1, double arg2) {
        JniMethodInfo methodinfo;
        if (!JniHelper::getMethodInfo(methodinfo, JAVA_CLASS_VIDEOEDITER, "postInfo","(IDD)V")) {
            LOGE("Get methodInfo error");
            return ;
        }
        if (listenerObj == NULL) {
            LOGE("Listener Obj is null");
            return;
        }
        methodinfo.env->CallVoidMethod(listenerObj, methodinfo.methodID, what, arg1, arg2);
        methodinfo.env->DeleteLocalRef(methodinfo.classID);
    }

public:
    void setObj(jobject obj)
    {
        JNIEnv *env = JniHelper::getEnv();
        if (env == NULL) {
            LOGE("%s %d: env is null", __FILE__, __LINE__);
            return ;
        }
        listenerObj = (jobject)env->NewGlobalRef(obj);
    }

    void refObj()
    {
        JNIEnv *env = JniHelper::getEnv();
        if (env == NULL) {
            LOGE("%s %d: env is null", __FILE__, __LINE__);
            return ;
        }
        env->DeleteGlobalRef(listenerObj);
        listenerObj = NULL;
    }
private:
    jobject listenerObj = NULL;
    jmethodID javaCallback = NULL;
    jclass javaClass = NULL;
};

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_delete_1MediaFilterProgressListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MediaFilterProgressListener *arg1 = (MediaFilterProgressListener *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(MediaFilterProgressListener **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilterProgressListener_1MediaFilterProgressBegan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MediaFilterProgressListener *arg1 = (MediaFilterProgressListener *) 0 ;
  MediaFilter *arg2 = (MediaFilter *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MediaFilterProgressListener **)&jarg1;
  arg2 = *(MediaFilter **)&jarg2;
  (arg1)->MediaFilterProgressBegan(arg2);
}


SWIGEXPORT void JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilterProgressListener_1MediaFilterProgressChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4) {
  MediaFilterProgressListener *arg1 = (MediaFilterProgressListener *) 0 ;
  MediaFilter *arg2 = (MediaFilter *) 0 ;
  double arg3 ;
  double arg4 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MediaFilterProgressListener **)&jarg1;
  arg2 = *(MediaFilter **)&jarg2;
  arg3 = (double)jarg3;
  arg4 = (double)jarg4;
  (arg1)->MediaFilterProgressChanged(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilterProgressListener_1MediaFilterProgressEnded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MediaFilterProgressListener *arg1 = (MediaFilterProgressListener *) 0 ;
  MediaFilter *arg2 = (MediaFilter *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MediaFilterProgressListener **)&jarg1;
  arg2 = *(MediaFilter **)&jarg2;
  (arg1)->MediaFilterProgressEnded(arg2);
}


SWIGEXPORT void JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilterProgressListener_1MediaFilterProgressCanceled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MediaFilterProgressListener *arg1 = (MediaFilterProgressListener *) 0 ;
  MediaFilter *arg2 = (MediaFilter *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MediaFilterProgressListener **)&jarg1;
  arg2 = *(MediaFilter **)&jarg2;
  (arg1)->MediaFilterProgressCanceled(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_new_1MediaFilter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MediaFilter *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (MediaFilter *)new MediaFilter();
  *(MediaFilter **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_delete_1MediaFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MediaFilter *arg1 = (MediaFilter *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(MediaFilter **)&jarg1;
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1init(JNIEnv *env, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int result;

  (void)env;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (int)(arg1)->init();

  jresult = (jint)result;
  return jresult;
}

SWIGEXPORT long JNICALL Java_com_meitu_media_tools_editor_VideoFilterEdit_CreateJniCallBack(JNIEnv *env, jobject jarg1_) {
    AndroidMediaFilterProgressListener *listener = new AndroidMediaFilterProgressListener();
    listener->setObj(jarg1_);

    return (long)listener;
}

SWIGEXPORT jboolean JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong listener) {
  jboolean jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->open((char const *)arg2);
  jresult = (jboolean)result;
  arg1->setProgressListener((AndroidMediaFilterProgressListener *)listener);

  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1setFFmpegLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (int)(arg1)->setFFmpegLog();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MediaFilter *arg1 = (MediaFilter *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  (arg1)->close();
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->load((char const *)arg2);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (int)(arg1)->process();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1abort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (bool)(arg1)->abort();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1progress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (float)(arg1)->progress();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1setWatermark(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jfloat jarg7, jfloat jarg8) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  float arg7 ;
  float arg8 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  arg5 = (int)jarg5;
  arg6 = (int)jarg6;
  arg7 = (float)jarg7;
  arg8 = (float)jarg8;
  result = (int)(arg1)->setWatermark((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1setCropPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (int)(arg1)->setCropPos(arg2,arg3);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1setCropResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (int)(arg1)->setCropResolution(arg2,arg3);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1setCropTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  float arg2 ;
  float arg3 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  result = (int)(arg1)->setCropTime(arg2,arg3);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1setOutResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (int)(arg1)->setOutResolution(arg2,arg3);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1setOutFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->setOutFileName((char const *)arg2);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getMeidaShowHight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (int)(arg1)->getMeidaShowHight();
  jresult = (jint)result;
  return jresult;
}

SWIGEXPORT jfloat JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getAverFrameRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (float)(arg1)->getAverFrameRate();
  jresult = (jfloat)result;
  return jresult;
}

SWIGEXPORT jfloat JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getRealFrameRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (float)(arg1)->getRealFrameRate();
  jresult = (jfloat)result;
  return jresult;
}

SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getMediaShowWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (int)(arg1)->getMediaShowWidth();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getMediaRealHight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (int)(arg1)->getMediaRealHight();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getMediaRealWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (int)(arg1)->getMediaRealWidth();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getMediaDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (double)(arg1)->getMediaDuration();
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getMediaRotate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (int)(arg1)->getMediaRotate();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getMediaVideoRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1; 
  result = (long long)(arg1)->getMediaVideoRate();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getMediaAudioRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1; 
  result = (long long)(arg1)->getMediaAudioRate();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1setProgressListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  MediaFilterProgressListener *arg2 = (MediaFilterProgressListener *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = *(MediaFilterProgressListener **)&jarg2;
  (arg1)->setProgressListener(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getProgressListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  MediaFilterProgressListener *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (MediaFilterProgressListener *)(arg1)->getProgressListener();
  *(MediaFilterProgressListener **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1quickCropVideo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  float arg2 ;
  float arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  (arg1)->quickCropVideo(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1setScaleModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  arg5 = (int)jarg5;
  result = (int)(arg1)->setScaleModel(arg2,arg3,arg4,arg5);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1setReverseMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int arg2 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = (int)jarg2;
  result = (int)(arg1)->setReverseMedia(arg2);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getReverseMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (int)(arg1)->getReverseMedia();
  jresult = (jint)result;
  return jresult;
}

SWIGEXPORT jfloatArray JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getConcatSegmentDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  float *result;
  int segmentCnt;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (float *)(arg1)->getConcatSegmentDuration();
  segmentCnt = (int)(arg1)->getSegmentCount();
  jfloatArray array = jenv->NewFloatArray(segmentCnt);

  jenv->SetFloatArrayRegion(array, 0, segmentCnt, result);
  //jresult = (jint)result;
  return array;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1cancelReverseMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (int)(arg1)->cancelReverseMedia();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getFrameRGBASize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int temp2 ;
  int temp3 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int)0;
    arg2 = &temp2;
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (int)0;
    arg3 = &temp3;
  }
  result = (int)(arg1)->getFrameRGBASize(arg2,arg3);
  jresult = (jint)result;
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }


  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getFrameRGBAData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jbyteArray jarg3) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  float arg2 ;
  uint8_t *arg3 ;
  size_t arg4 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = (float)jarg2;
  {
    if (jarg3) {
      arg3 = (uint8_t *) jenv->GetByteArrayElements(jarg3, 0);
      arg4 = (size_t) jenv->GetArrayLength(jarg3);
    } else {
      arg3 = 0;
      arg4 = 0;
    }
  }
  result = (int)(arg1)->getFrameRGBAData(arg2,arg3,arg4);
  jresult = (jint)result;
  {
    if (jarg3) jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg3, 0);
  }

  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1addConcatInVideo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->addConcatInVideo((char const *)arg2);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1initInFIle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->initInFIle((char const *)arg2);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1concatVideo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong listener) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
    //AndroidMediaFilterProgressListener *listener = new AndroidMediaFilterProgressListener;
  arg1->setProgressListener((AndroidMediaFilterProgressListener *)listener);
  result = (int)(arg1)->concatVideo((char const *)arg2);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1initOutFileWithoutEncode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->initOutFileWithoutEncode((char const *)arg2);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getFileInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (int)(arg1)->getFileInfo();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1setReverseInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  float arg2 ;
  float arg3 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  result = (int)(arg1)->setReverseInterval(arg2,arg3);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getReverseEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (float)(arg1)->getReverseEnd();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getReverseStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (float)(arg1)->getReverseStart();
  jresult = (jfloat)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1remuxStripMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jlong listenerAddr) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4;
  //AndroidMediaFilterProgressListener *listener = new AndroidMediaFilterProgressListener;
  arg1->setProgressListener((AndroidMediaFilterProgressListener *)listenerAddr);
  //arg1->setProgressListener(listener);
  result = (int)(arg1)->remuxStripMedia((char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getVideoStreamDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  long result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (long)(arg1)->getVideoStreamDuration();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1getAudioStreamDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  long result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (long)(arg1)->getAudioStreamDuration();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1setMinEage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  int arg2 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = (int)jarg2;
  result = (int)(arg1)->setMinEage(arg2);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1generateThumb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jlong jarg5, jlong listenerAddr) {
  jint jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double *arg4 ;
  size_t arg5 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = 0;
  arg1->setProgressListener((AndroidMediaFilterProgressListener *)listenerAddr);
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    arg4 = jenv->GetDoubleArrayElements(jarg4, NULL);
  }
  arg5 = (size_t)jarg5;
  result = (int)(arg1)->generateThumb((char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result;
  {
    jenv->ReleaseDoubleArrayElements(jarg4, arg4, 0);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);

  return jresult;
}


SWIGEXPORT void JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1listener_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  MediaFilterProgressListener *arg2 = (MediaFilterProgressListener *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MediaFilter **)&jarg1;
  arg2 = *(MediaFilterProgressListener **)&jarg2;
  if (arg1) (arg1)->listener = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MediaFilter_1listener_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MediaFilter *arg1 = (MediaFilter *) 0 ;
  MediaFilterProgressListener *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MediaFilter **)&jarg1;
  result = (MediaFilterProgressListener *) ((arg1)->listener);
  *(MediaFilterProgressListener **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_new_1MTVideoTools(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MTVideoTools *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (MTVideoTools *)new MTVideoTools();
  *(MTVideoTools **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_delete_1MTVideoTools(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MTVideoTools *arg1 = (MTVideoTools *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(MTVideoTools **)&jarg1;
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_meitu_media_tools_filter_MediaEditJNI_MTVideoTools_1qtFastStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  MTVideoTools *arg1 = (MTVideoTools *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MTVideoTools **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->qtFastStart((char const *)arg2,(char const *)arg3);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}

#ifdef __cplusplus
}
#endif

